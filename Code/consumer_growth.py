import numpy as np
from sklearn.linear_model import LinearRegression

"""
This class contains the functions used to extrapolate the number of consumers
in each state for 2001-2007, and then for 2024-2027.
"""

class ConsumerGrowth:
    def __init__(self, df, model_type):
        self.df = df
        self.model_type = model_type
        self.df, self.models = self.make_models()

    def make_models(self):
        """
        Makes the models for the consumer growth.
        """
        if self.model_type == "linear":
            models = self.make_linear_model(self.df)
            return self.apply_linear_model(self.df, models), models
        else:
            raise ValueError("Invalid model type.")
    
    def make_linear_model(self, df):
        """
        Creates a dataframe containing either a linear model or an exponential model to fill 
        in the missing customer data for each state.

        If you want to include 2007 in the model, change the '>= 2008' to '>= 2007'.

        Args:
            df (df): The dataframe we want to fill in the missing customer data for.

        Returns:
            df: A new dataframe with the regression models for each state.
        """
        return df[df['Year'] >= 2008].groupby("State").apply(lambda x: LinearRegression().fit(x['Year'].values.reshape(-1, 1), x['Customers'].values.reshape(-1, 1)), include_groups=False).reset_index(name='Model')



    def apply_linear_model(self, df, modeldf):
        """
        Fills in the missing values for the Customers column using the models generated by CustomerFiller.
        If you want to include 2007 in the model, remove the 'or year == 2007'.

        Args:
            df (df): The dataframe we want to fill in the missing customer data for.
            modeldf (df): The dataframe containing the regression models for each state.

        Returns:
            df: The dataframe with the missing customer data filled in.
        """
        for state in df['State'].unique():
            state_df = df[df['State'] == state]
            model = modeldf[modeldf['State'] == state]['Model'].values[0]

            for year in state_df['Year'].unique():
                if np.isnan(state_df.loc[state_df['Year'] == year, 'Customers'].values[0]) or state_df.loc[state_df['Year'] == year, 'Customers'].values[0] == 0 or year == 2007:
                    predicted_customers = np.round(model.predict([[year]])[0][0])
                    df.loc[(df['State'] == state) & (df['Year'] == year), 'Customers'] = predicted_customers
        return df